Name: Sangwoo Shin
ID: 119294213
Email: sshin36@myseneca.ca
Date: 2022-10-01

  All integers can be expressed in a computer using only 0 and 1, but it is impossible to display accurate real numbers because there are huge amounts of real numbers exist between 0 and 1. In this workshop part 2, UniqueQueue class is created to allow a push function to save values without duplicate values. In this class, In order to store the input values in an object without duplicate values, the values stored in each index were compared to the new values to be stored. However, when the data type of the object is a double type which represent real numbers, so it was impossible to accurate comparison between the stored value in object and new value. Thus I specialized the push function for double type and, in this specializing function, I set, by using std::fabs(), if the absolute value of difference between two values is smaller than 0.005 than the function judge those two values are the same.
  If you look at the member variable called 'dummy' in Queue class, you can see that the data type is static, and the reason why internal linkage is used is because when the data type of the object is a different class like 'Dictionary', you need to initialize the member variables in a format that fits Dictionary class, and to do that, you need to specialize the dummy outside the class. However, if a dummy, which is a member value, is declared outside, it cannot be redefined outside the class scope without static, so static was used.
  In Dictionary module, I added display function and output operator to display information about Dictionary. Moreover, to access memory of Dictionary object without argument, I added default constructor 'Dictionary()' and, In Queue.h, in order to initialize dummy ("Empty State", "Empty Substitute"), I made assignment operator 'Dictionary& operator=(const Dictionary& dic)'
  Lastly, When compile the program from the main, the main only include the Queue class header, so compiler look at the functions in the queue header file first, and if the definition of the function is not shown, compiler cannot instantiate them in the format for each type, so if the main does not include the cpp file, we must include all definitions in the header file.